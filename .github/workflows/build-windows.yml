---
name: Build - Windows

on:
  pull_request:
  push:
    branches:
      - main

env:
  VCPKG_BUILD_TYPE: release
  CMAKE_BUILD_PARALLEL_LEVEL: 2
  MAKEFLAGS: '-j 2'

jobs:
  job:
    name: ${{ matrix.os }}-${{ matrix.buildtype }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019]
        buildtype: [Debug, RelWithDebInfo]
        include:
          - os: windows-2019
            triplet: x64-windows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Restore artifacts, or setup vcpkg (do not install any package)
        uses: lukka/run-vcpkg@v7
        with:
          setupOnly: true
          vcpkgDirectory: ${{ github.workspace }}/vcpkg
          appendedCacheKey: ${{ hashFiles( '**/vcpkg.json' ) }}
          vcpkgTriplet: ${{ matrix.triplet }}
          additionalCachedPaths: ${{ github.workspace }}/build/vcpkg_installed
          vcpkgGitCommitId: d72783cb3aeddfd667861caef1060e54ca6fa7a9

      - name: Get latest CMake and ninja
        uses: lukka/get-cmake@latest

      - name: Build with CMake
        uses: lukka/run-cmake@v3
        with:
          cmakeListsTxtPath: ${{ github.workspace }}/CMakeLists.txt
          useVcpkgToolchainFile: true
          buildDirectory: ${{ github.workspace }}/build
          cmakeBuildType: ${{ matrix.buildtype }}

      - name: dir
        run: find $RUNNER_WORKSPACE
        shell: bash

      - name: Upload artifact binary (exe)
        uses: actions/upload-artifact@v3.0.0
        with:
          name: otclient-${{ matrix.name }}-${{ matrix.buildtype }}-${{ github.sha }}
          path: ${{ runner.workspace }}/build/otclient.exe

      - name: Upload artifact binary (dlls)
        uses: actions/upload-artifact@v3.0.0
        with:
          name: otclient-${{ matrix.name }}-${{ matrix.buildtype }}-${{ github.sha }}
          path: ${{ runner.workspace }}/build/*.dll
