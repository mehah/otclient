name: Build - Emscripten

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - "src/**"
      - ".github/workflows/build-browser.yml"
  push:
    paths:
      - "src/**"
      - ".github/workflows/build-browser.yml"
    branches:
      - main

permissions:
  contents: read
  pull-requests: read

env:
  LUKKA_RUN_VCPKG_SHA: "${{ vars.LUKKA_RUN_VCPKG_SHA }}"

jobs:
  cancel-runs:
    if: github.event_name == 'pull_request' && github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@main
        with:
          access_token: ${{ github.token }}

  build:
    name: ${{ matrix.buildtype }}
    runs-on: ubuntu-latest
    env:
      ACTIONS_RUNTIME_TOKEN: ${{ secrets.ACTIONS_RUNTIME_TOKEN }}
      ACTIONS_CACHE_URL: ${{ secrets.ACTIONS_CACHE_URL }}
      NODE_OPTIONS: "--max-old-space-size=4096"

    concurrency:
      group: otclient-emscripten-${{ github.workflow }}-${{ github.ref }}-${{ matrix.buildtype }}
      cancel-in-progress: true

    strategy:
      fail-fast: false
      matrix:
        buildtype: [emscripten-debug]
        include:
          - buildtype: emscripten-debug
            cmake_build_type: Debug

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event_name == 'push' && github.repository || (github.event.pull_request.head.repo.fork && github.repository || github.event.pull_request.head.repo.full_name) }}
          ref: ${{ github.event_name == 'push' && github.ref || (github.event.pull_request.head.repo.fork && github.event.pull_request.base.ref || github.event.pull_request.head.ref) }}
          fetch-depth: 0

      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: "3.1.45"
      
      - name: Setup Node.js for Emscripten
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Get vcpkg commit ID
        id: vcpkg-step
        run: |
          vcpkgCommitId=$(grep '.builtin-baseline' vcpkg.json | awk -F: '{print $2}' | tr -d '," ')
          echo "vcpkgGitCommitId=$vcpkgCommitId" >> $GITHUB_OUTPUT

      - name: Cache full vcpkg artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/vcpkg/archives
            ${{ github.workspace }}/vcpkg/installed
            ${{ github.workspace }}/vcpkg/buildtrees
            ${{ github.workspace }}/vcpkg/downloads
          key: vcpkg-${{ matrix.buildtype }}-${{ steps.vcpkg-step.outputs.vcpkgGitCommitId }}
          restore-keys: |
            vcpkg-${{ matrix.buildtype }}-
      - name: Ensure run-vcpkg action is pinned by full commit SHA
        run: |
          if [ -z "${LUKKA_RUN_VCPKG_SHA}" ]; then
            echo "::error title=Missing pin::Set LUKKA_RUN_VCPKG_SHA (40-char commit) in repository Variables."
            exit 1
          fi
          if ! echo "${LUKKA_RUN_VCPKG_SHA}" | grep -Eq '^[0-9a-f]{40}$'; then
            echo "::error title=Invalid pin::LUKKA_RUN_VCPKG_SHA must be a full 40-char commit SHA."
            exit 1
          fi


      - name: Setup vcpkg
        uses: lukka/run-vcpkg@a400452f634fe49e9f18d388aeb1809dcc642136
        with:
          vcpkgGitCommitId: ${{ steps.vcpkg-step.outputs.vcpkgGitCommitId }}


      - name: Validate vcpkg baseline SHA
        shell: pwsh
        run: |
          $SHAS = "${{ steps.vcpkg-step.outputs.vcpkgGitCommitId }}"
          if ([string]::IsNullOrEmpty($SHAS)) {
            echo "::error title=Missing vcpkg baseline::Provide a full 40-char vcpkgGitCommitId."
            exit 1
          }
          if ($SHAS -notmatch '^[0-9a-f]{40}$') {
            echo "::error title=Invalid vcpkg baseline::vcpkgGitCommitId must be a full 40-char commit SHA."
            exit 1
          }
      - name: Install CMake and Ninja
        uses: lukka/get-cmake@v3.31.6

      - name: Configure CMake
        run: |
          cmake -G Ninja -S . -B build-${{ matrix.buildtype }} \
            -DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=$EMSDK/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake \
            -DVCPKG_TARGET_TRIPLET=wasm32-emscripten \
            -DVCPKG_OVERLAY_PORTS=${{ github.workspace }}/browser/overlay-ports \
            -DVCPKG_BUILD_TYPE=${{ matrix.cmake_build_type }} \
            -DCMAKE_MAKE_PROGRAM=ninja \
            -DOPTIONS_ENABLE_IPO=OFF \
            -DTOGGLE_BIN_FOLDER=ON \
            -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
            -DTOGGLE_BOT_PROTECTION=OFF \
            -DCMAKE_CXX_FLAGS="-fno-lto -pthread -std=c++20 -D_LIBCPP_DISABLE_AVAILABILITY -fexperimental-library" \
            -DCMAKE_EXE_LINKER_FLAGS="-s DISABLE_EXCEPTION_CATCHING=0 -s ALLOW_MEMORY_GROWTH=1 -s USE_PTHREADS=0 -s WASM=1 -s NO_EXIT_RUNTIME=1 -fno-lto" \
            -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=OFF \
            -DCMAKE_CXX_FLAGS_RELEASE="-O2 -DNDEBUG -fno-lto" \
            -DCMAKE_CXX_FLAGS_DEBUG="-O0 -g -fno-lto" \
            -DCMAKE_CXX_STANDARD=20

      - name: Build
        run: |
          cmake --build build-${{ matrix.buildtype }} --target otclient --verbose

      - name: Create and Upload Artifact
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: otclient-${{ matrix.buildtype }}-${{ github.sha }}
          path: ${{ github.workspace }}/build-${{ matrix.buildtype }}/bin/
          retention-days: 30
