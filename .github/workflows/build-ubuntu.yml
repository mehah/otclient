name: Build - Ubuntu

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - "src/**"
      - ".github/workflows/build-ubuntu.yml"
  merge_group:
  push:
    branches:
      - main
    paths:
      - "src/**"
      - ".github/workflows/build-ubuntu.yml"

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 2
  MAKEFLAGS: "-j 2"

jobs:
  cancel-runs:
    if: github.event_name == 'pull_request' && github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@main
        with:
          access_token: ${{ github.token }}

  build:
    if: ${{ github.event_name == 'push' || !github.event.pull_request.draft }}
    name: ${{ matrix.os }}-${{ matrix.buildtype }}
    runs-on: ${{ matrix.os }}

    concurrency:
      group: otclient-${{ github.workflow }}-${{ github.ref }}-${{ matrix.buildtype }}
      cancel-in-progress: true

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        buildtype: [linux-debug]
        include:
          - os: ubuntu-24.04
            triplet: x64-linux
            cmake_build_type: Debug

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Linux Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache gcc-14 g++-14 libglew-dev libx11-dev linux-headers-$(uname -r)

      - name: Switch to GCC 14
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 100
          sudo update-alternatives --set gcc /usr/bin/gcc-14
          sudo update-alternatives --set g++ /usr/bin/g++-14

      - name: Get vcpkg commit ID
        id: vcpkg-step
        run: |
          vcpkgCommitId=$(grep '.builtin-baseline' vcpkg.json | awk -F: '{print $2}' | tr -d '," ')
          echo "vcpkgGitCommitId=$vcpkgCommitId" >> $GITHUB_OUTPUT

      - name: Compute vcpkg.json hash
        id: hash
        shell: pwsh
        run: |
          $json = Get-Content "vcpkg.json" -Raw -Encoding UTF8
          $bytes = [System.Text.Encoding]::UTF8.GetBytes($json)
          $sha256 = [System.Security.Cryptography.SHA256]::Create()
          $hashBytes = $sha256.ComputeHash($bytes)
          $hash = [BitConverter]::ToString($hashBytes) -replace '-', ''
          "hash=$hash" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Cache vcpkg binary artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/vcpkg/archives
            ${{ github.workspace }}/vcpkg/downloads
            ${{ github.workspace }}/vcpkg/installed
            ${{ github.workspace }}/vcpkg/buildtrees
          key: vcpkg-${{ matrix.os }}-${{ matrix.buildtype }}-${{ steps.hash.outputs.hash }}
          restore-keys: |
            vcpkg-${{ matrix.buildtype }}-

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ${{ steps.vcpkg-step.outputs.vcpkgGitCommitId }}

      - name: Install CMake and Ninja
        uses: lukka/get-cmake@v3.31.6

      - name: Cache CMake build directory
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/build-${{ matrix.buildtype }}
          key: cmake-dir-${{ matrix.buildtype }}
          restore-keys: |
            cmake-dir-${{ matrix.buildtype }}

      - name: Configure and Build
        run: |
          cmake -G Ninja -S . -B build-${{ matrix.buildtype }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
            -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake \
            -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} \
            -DTOGGLE_BIN_FOLDER=ON \
            -DOPTIONS_ENABLE_IPO=OFF \
            -DTOGGLE_BOT_PROTECTION=OFF \
            -DCMAKE_C_COMPILER=gcc \
            -DCMAKE_CXX_COMPILER=g++

          cmake --build build-${{ matrix.buildtype }} --target otclient

      - name: Check otclient.exe path
        run: Get-ChildItem -Recurse -Filter "otclient*.exe"
        shell: pwsh

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: otclient-${{ matrix.os }}-${{ matrix.buildtype }}-${{ github.sha }}
          path: |
            ${{ github.workspace }}/build-${{ matrix.buildtype }}/bin/
